<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.haige.db.mapper.FileInfoDOMapper">
  <resultMap id="BaseResultMap" type="com.haige.db.entity.FileInfoDO">
    <id column="file_id" jdbcType="INTEGER" property="fileId" />
    <result column="file_real_name" jdbcType="VARCHAR" property="fileRealName" />
    <result column="file_name" jdbcType="VARCHAR" property="fileName" />
    <result column="file_real_path" jdbcType="VARCHAR" property="fileRealPath" />
    <result column="file_path" jdbcType="VARCHAR" property="filePath" />
    <result column="file_work" jdbcType="VARCHAR" property="fileWork" />
    <result column="file_work_id" jdbcType="INTEGER" property="fileWorkId" />
    <result column="file_batch" jdbcType="INTEGER" property="fileBatch" />
    <result column="file_is_use" jdbcType="VARCHAR" property="fileIsUse" />
  </resultMap>



  <sql id="Base_Column_List">
    file_id, file_real_name, file_name, file_real_path, file_path, file_work, file_work_id, 
    file_batch, file_is_use
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from haige_file_info
    where file_id = #{fileId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from haige_file_info
    where file_id = #{fileId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.haige.db.entity.FileInfoDO">
    insert into haige_file_info (file_id, file_real_name, file_name, 
      file_real_path, file_path, file_work, 
      file_work_id, file_batch, file_is_use
      )
    values (#{fileId,jdbcType=INTEGER}, #{fileRealName,jdbcType=VARCHAR}, #{fileName,jdbcType=VARCHAR}, 
      #{fileRealPath,jdbcType=VARCHAR}, #{filePath,jdbcType=VARCHAR}, #{fileWork,jdbcType=VARCHAR}, 
      #{fileWorkId,jdbcType=INTEGER}, #{fileBatch,jdbcType=INTEGER}, #{fileIsUse,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.haige.db.entity.FileInfoDO">
    insert into haige_file_info
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="fileId != null">
        file_id,
      </if>
      <if test="fileRealName != null">
        file_real_name,
      </if>
      <if test="fileName != null">
        file_name,
      </if>
      <if test="fileRealPath != null">
        file_real_path,
      </if>
      <if test="filePath != null">
        file_path,
      </if>
      <if test="fileWork != null">
        file_work,
      </if>
      <if test="fileWorkId != null">
        file_work_id,
      </if>
      <if test="fileBatch != null">
        file_batch,
      </if>
      <if test="fileIsUse != null">
        file_is_use,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="fileId != null">
        #{fileId,jdbcType=INTEGER},
      </if>
      <if test="fileRealName != null">
        #{fileRealName,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null">
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="fileRealPath != null">
        #{fileRealPath,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="fileWork != null">
        #{fileWork,jdbcType=VARCHAR},
      </if>
      <if test="fileWorkId != null">
        #{fileWorkId,jdbcType=INTEGER},
      </if>
      <if test="fileBatch != null">
        #{fileBatch,jdbcType=INTEGER},
      </if>
      <if test="fileIsUse != null">
        #{fileIsUse,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.haige.db.entity.FileInfoDO">
    update haige_file_info
    <set>
      <if test="fileRealName != null">
        file_real_name = #{fileRealName,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null">
        file_name = #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="fileRealPath != null">
        file_real_path = #{fileRealPath,jdbcType=VARCHAR},
      </if>
      <if test="filePath != null">
        file_path = #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="fileWork != null">
        file_work = #{fileWork,jdbcType=VARCHAR},
      </if>
      <if test="fileWorkId != null">
        file_work_id = #{fileWorkId,jdbcType=INTEGER},
      </if>
      <if test="fileBatch != null">
        file_batch = #{fileBatch,jdbcType=INTEGER},
      </if>
      <if test="fileIsUse != null">
        file_is_use = #{fileIsUse,jdbcType=VARCHAR},
      </if>
    </set>
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.haige.db.entity.FileInfoDO">
    update haige_file_info
    set file_real_name = #{fileRealName,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      file_real_path = #{fileRealPath,jdbcType=VARCHAR},
      file_path = #{filePath,jdbcType=VARCHAR},
      file_work = #{fileWork,jdbcType=VARCHAR},
      file_work_id = #{fileWorkId,jdbcType=INTEGER},
      file_batch = #{fileBatch,jdbcType=INTEGER},
      file_is_use = #{fileIsUse,jdbcType=VARCHAR}
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>


  <select id="selectFileById"   parameterType="INTEGER" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from haige_file_info
    where file_work ='goods' and file_work_id = #{goodsId} and file_is_use ='1' order by file_id asc
  </select>
</mapper>